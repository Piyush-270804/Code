import java.util.ArrayList;
import java.util.Scanner;

public class ElementPropertyCounte {
	public static void main(String[] args) { 
		Scanner scanner = new Scanner(System.in); 
		ArrayList<Integer> numbers = new ArrayList<>(); 
		
		System.out.println("Enter a list of numbers separated by spaces:"); 
		String input = scanner.nextLine(); 
		String[] inputNumbers = input.split(" "); 
		
		for (String numStr : inputNumbers) { 
		try { 
		int num = Integer.parseInt(numStr); 
		numbers.add(num); 
		} catch (NumberFormatException e) { 
		System.err.println("Invalid input. Skipping: " + numStr); 
		} 
		} 
		
		int evenCount = countElements(numbers, ElementProperty.EVEN); 
		int oddCount = countElements(numbers, ElementProperty.ODD); 
		int primeCount = countElements(numbers, ElementProperty.PRIME); 
		int palindromeCount = countElements(numbers, ElementProperty.PALINDROME); 
	
		System.out.println("Number of even numbers: " + evenCount); 
		System.out.println("Number of odd numbers: " + oddCount); 
		System.out.println("Number of prime numbers: " + primeCount); 
		System.out.println("Number of palindromes: " + palindromeCount); 
		scanner.close(); 
		} 
	
		enum ElementProperty { 
		EVEN, 
		ODD, 
		PRIME, 
		PALINDROME 
		} 
		
		public static int countElements(ArrayList<Integer> list, ElementProperty property) { 
		int count = 0; 
		for (int num : list) { 
		switch (property) { 
		case EVEN: 
		if (num % 2 == 0) { 
		count++; 
		                    } 
		                    break; 
		                case ODD: 
		                    if (num % 2 != 0) { 
		                        count++; 
		                    } 
		                    break; 
		                case PRIME: 
		                    if (isPrime(num)) { 
		                        count++; 
		                    } 
		                    break; 
		                case PALINDROME: 
		                    if (isPalindrome(num)) { 
		                        count++; 
		                    } 
		                    break; 
		            } 
		        } 
		 
		        return count; 
		    } 
		 
		   
		    public static boolean isPrime(int num) { 
		        if (num <= 1) { 
		            return false; 
		        } 
		        for (int i = 2; i * i <= num; i++) { 
		            if (num % i == 0)
	    { 
		return false; 
		} 
		} 
		return true; 
		} 
		public static boolean isPalindrome(int num) { 
		String numStr = String.valueOf(num); 
		if(numStr.length()>1) 
		{  
		String reversedNumStr = new StringBuilder(numStr).reverse().toString(); 
		return numStr.equals(reversedNumStr); 
		}
		else 
		{ 
		 
		return false;
}
		}
}
